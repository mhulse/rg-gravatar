<csr:rule name="rgGravatarRule" match="rg:gravatar">
	
	<csr:description>
		
		<h1>rg:gravatar</h1>
		
		<ul>
			<li><b>Author:</b> Micky Hulse</li>
			<li><b>Created:</b> 2010/07/22</li>
			<li><b>Modified:</b> 2010/08/11</li>
			<li><b>About:</b> Generates <a href="http://gravatar.com">Gravatar</a> image.</li>
		</ul>
		
		<hr>
		
		<h2>Example 01: Just the URI</h2>
		<p>By using the runtime expression, we trick Cache into thinking that the RULE is <b>NOT</b> being wrapped by an HTML image tag. Ugh!</p>
		<example>#("<")#img src="<rg:gravatar email="bob@bob.com" />" width="80" height="80" alt="Gravatar"></example>
		
		<h2>Example 02: Simple image tag</h2>
		<example><rg:gravatar email="bob@bob.com" image="true" attributes="alt|Gravatar image" /></example>
		
		<h2>Example 03: Full meal deal</h2>
		<example><rg:gravatar email="bob@bob.com" image="true" size="50" default="identicon" rating="pg" attributes="alt|Gravatar image, class|fooClass, id|fooId" xhtml="true" /></example>
		
		<hr>
		
		<p>Thanks to <a href="http://snipurl.com/zp50r">Thomas Springer</a> and <a href="http://tinyurl.com/37fnlg5">Servit</a> for the kick-butt MD5 logic!</p>
		<p>Inspired by this page: <a href="http://en.gravatar.com/site/implement/images/php/">PHP Image Requests</a>.
		<p>Find the latest version of this RULE on <a href="http://github.com/mhulse/rg-gravatar">GitHub</a>.</p>
		
	</csr:description>
	
	<csr:attribute name="email" description="The email address. Required." type="VariableName:STRING" required>
	<csr:attribute name="size" description="Size (in pixels), defaults to 80(px) [ 1 - 512 ] (omit the px)." type="VariableName:STRING">
	<csr:attribute name="default" description="Default imageset to use [ 404 | mm | identicon | monsterid | wavatar ]. Default is the Gravatar image." type="VariableName:STRING">
	<csr:attribute name="rating" description="Maximum rating (inclusive) [ g | pg | r | x ]. Default is 'g'." type="VariableName:STRING">
	<csr:attribute name="image" description="'True' to return a complete IMG tag. Default is just the URI." type="VariableName:STRING">
	<csr:attribute name="attributes" description="Delimited attributes to include in the IMG tag. Format: 'attribute|value, ...'." type="VariableName:STRING">
	<csr:attribute name="xhtml" description="'True' to return a valid XHTML IMG tag." type="VariableName:STRING">
	
	<csr:action>
		
		<script language="cache" runat="server">
			
			//----------------------------------
			// Declare:
			//----------------------------------
			
			new csr
			
			//----------------------------------
			// Get RULE attributes:
			//----------------------------------
			
			set csr("email") = ##'..GetAttribute("email", "")'##
			
			//----------------------------------
			// Email address?
			//----------------------------------
			
			if ($length(csr("email"))) {
				
				//--------------------------------------------------------------------------
				//
				// Supposedly, an email address exists: Begin program.
				//
				//--------------------------------------------------------------------------
				 
				//----------------------------------
				// Macro(s):
				//----------------------------------
				
				/**
				* Trims leading and trailing whitespace.
				* 
				* @param string: String to trim.
				* @return string: Trimmed input string.
				*/
				
				#define trim(%string) $zstrip(%string, "<>W")
				
				/**
				* Converts string to lowercase.
				* 
				* @param string: String to convert.
				* @return string: Lowercased input string.
				*/
				
				#define lower(%string) $zconvert(%string, "L")
				
				//----------------------------------
				// Declare:
				//----------------------------------
				
				new return, hash, md5, char, md5
				new i
				
				//----------------------------------
				// Initialize:
				//----------------------------------
				
				set (return, hash, md5, char, md5) = ""
				set i = 0
				
				//----------------------------------
				// Get RULE attributes:
				//----------------------------------
				
				set csr("size") = ##'..GetAttribute("size", "80")'##
				set csr("default") = ##'..GetAttribute("default", "")'##
				set csr("rating") = ##'..GetAttribute("rating", "g")'##
				set csr("image") = ##'..GetAttribute("image", "")'##
				set csr("attributes") = ##'..GetAttribute("attributes", "")'##
				set csr("xhtml") = ##'..GetAttribute("xhtml", "")'##
				
				//----------------------------------
				// MD5 email address:
				//----------------------------------
				
				set csr("email") = $$$lower($$$trim(csr("email")))
				
				; Servit md5 solution:
				set hash = $system.Encryption.MD5Hash(csr("email")) // 16-byte hash using the MD5 message digest algorithm.
				set md5 = ##class(%xsd.hexBinary).LogicalToXSD(hash) // Converts the Cache %Binary value to the SOAP base64 encoded value.
				
				/*
				; Thomas md5 solution:
				set hash = ##class(%SYSTEM.Encryption).MD5Hash(csr("email"))
				set md5 = ""
				for i=1:1:$length(hash) {
					set char = $zhex($ascii(hash, i))
					set md5 = md5 _ $select($length(char) = 1:"0" _ char, 1:char)
				}
				*/
				
				set md5 = $$$lower(md5)
				
				//----------------------------------
				// Generate URI:
				//----------------------------------
				
				set return = "http://www.gravatar.com/avatar/" _ md5 _ "?s=" _ csr("size") _ "&amp;d=" _ ..EscapeURL(csr("default")) _ "&amp;r=" _ csr("rating")
				
				if ($$$lower(csr("image")) = "true") {
					
					//--------------------------------------------------------------------------
					//
					// Return a full image (X?)HTML tag:
					//
					//--------------------------------------------------------------------------
					
					//----------------------------------
					// Start HTML image tag:
					//----------------------------------
					
					set return = "<img src=""" _ return _ """"
					
					//----------------------------------
					// Image attributes?:
					//----------------------------------
					
					if ($length(csr("attributes"))) {
						
						set return = return _ " "
						
						for i=1:1:$length(csr("attributes"), ",") {
							
							//----------------------------------
							// Attribute(s) exist:
							//----------------------------------
							
							set attribute = $$$trim($piece(csr("attributes"), ",", i))
							
							; There should only be one delimeter:
							if ($length(attribute, "|") = 2) {
								
								//----------------------------------
								// Attribute is valid:
								//----------------------------------
								
								set key = $$$trim($piece(attribute, "|"))
								set value = $$$trim($piece(attribute, "|", 2))
								
								set return = return _ key _ "=""" _ value _ """ "
								
							}
							
						}
						
						; Remove trailing whitespace:
						set return = $$$trim(return)
						
					}
					
					//----------------------------------
					// Finish building HTML image tag:
					//----------------------------------
					
					set return = return _ " width=""" _ csr("size") _ """ height=""" _ csr("size") _ """" _ $case($$$lower(csr("xhtml")), "true":" /", :"") _ ">"
					
				}
				
				//----------------------------------
				// Write the output:
				//----------------------------------
				
				write return
				
				//----------------------------------
				// Garbage collection:
				//----------------------------------
				
				#undef trim
				#undef lower
				
				kill csr
				kill return, hash, md5, char, md5
				kill i
				
			}
			
		</script>
		
	</csr:action>
	
</csr:rule>